（1）、Function
1、rest 
rest代替arguments，arguments是类数组对象，但是 rest是正常的数组对象。
使用方法：function add(...values) {}   // values就是rest的一个数组对象
注意：...values后面不能再有参数
2、name
返回函数的名字
3、双引号绑定 // 目前浏览器还不适应
this::fn(xxx)  === fn.bind(this,xxx)

（2）、Array
1、Array.from（arr） 
将类数组转化为数组的方法，类数组：arguments，jq选择器等
2、Array.of（1,2,3）   // [1,2,3] 
将一组元素转化为数组
3、arr.copyWithin（target，[start]，[end]）
将arr从target开始替换，替换的内容是arr的start位置到end位置 （不包括end位置）
[1, 2, 3, 4, 5].copyWithin(0,2,4)  // [3, 4, 3, 4, 5]
4、arr.findIndex（）
可以返回满足条件的数组的下标，和find一样使用   没有返回-1
5、arr.fill(target,[start],[end])
可以填充数组，会将arr中start开始到end（不包含）的元素替换成target 会改变arr的值
[1,2,3].fill(7,1,2)  === [1,7,3]
6、keys(),values(),entries()三个用于for...of循环
for(let i of [1,2].keys()){//i就是数组的元素小标}
for(let v of [1,2].values()){//v就是数组的元素，其实这个values可以省略}
for(let [i,v] of [1,2].entries()){//i就是数组的小标,v就是数组的元素}
7、arr.includes()
用法和str.includes()一样
8、flat()和flatMap() // 目前谷歌浏览器还不支持这个方法
arr.flat(n)将数组将n个维度，参数设置Infinity可以变成一维
9、...运算符
const [a, ...b] = [1, 2, 3]; // b = [2,3]

// Array总结：
数据for...of循环使用for(let v of [1,2].values()){}
查询数据是否存在某个元素 使用arr.includes()方法
查询数据存在于数组的某个位置 使用arr.findIndex()方法

（3）、Object
1、简写：只是简写了key值
a={x:1}   let b = {a}   // let b = {a:{x:1}}
2、Object.is(x,y) // 同值相等的判断
用来判断x,y是否相等，可以解决isNaN!==isNaN的问题
3、Object.assign(target,obj1) // 这个是浅复制  只会改变target的值，如果想要对象深复制  target改为{}
将obj1的每个元素和对应的值隐射到target中，并更新target中同key的值
如果是两个数组，会将元素的下标当成key值，一一替换 Object.assign([1, 2, 3], [4, 5]) = [4,5,3]
4、对象遍历的方法
for...in  会遍历对象继承的属性 不会遍历Symbol属性
for(let key of Object.keys(obj)){} 不会遍历继承的属性和Symbol属性
大部分使用后面这种方法
5、super关键字
和this一样使用，只是这个super指向的是当前对象的原型对象
6、keys(),values(),entries()三个用于for...of循环
用法和上面数组的相同
7、...运算符  // 限制条件同Function一样
const {a, ...b} = {a:1,b:2,c:3}; // b = {b:2,c:3}
let z = {a:1,b:2}   let x = {...z} // x = {a:1,b:2} 类似Object.assign()
还可以写成运算符 const obj = {...(x > 1 ? {a: 1} : {})};


（4）、Set和Map的数据结构
1、Set是类数组对象，特点是里面的数组是唯一值，不可重复的，如果有重复的会自动去重  --[...new Set(array)]
所以我们可以用这个来实现去重的功能。const set = new Set([1,2,2])    [...set]// [1,2]
2、类数组对象的长度不能用length，只能用size
set.size = [...set].length
3、类数组方法 add  // 和push类似
set.add(4) === [...set].push(4)
4、set.delete(x) 返回一个布尔值  表示是否删除 
5、set.has(x) 返回一个布尔值   表示是存在这个值 类似于includes()  一般用于if（set.has(x)）判断
6、set.clear() 请给所有的成员   没有返回值 此时set是一个空的类数组
7、遍历 同样提供了keys(),values().entries()三个遍历方法
但是这里特别注意  Set对象的key值和value值是相同的   可以说是没有key值的
8、并集、交集，差集
set = new Set([...a, ...b]); // 并集
set = new Set([...a].filter(x => b.has(x))); // 交集
set = new Set([...a].filter(x => !b.has(x))); // 差集
9、特别注意  目前没有直接去改变set对象中某个值的方法，只能通过间接的方法
就是先转换成数组  然后操作数组
10、Map对象 // 类对象
解决Object只能是字符串作为key值的限制，Map对象的key值key可以是某个对象
11、属性方法
m.set({a:1},"content") // 写入一个属性和其对应的值
m.get({a:1}) // 获取一个属性对应的值
m.has({a:1}) // 返回布尔值   是否存在某个属性
m.delete({a:1}) // 删除某个属性的和其对应的值
m.size() // 返回m中有多少个属性
m.clear() // 清楚所以的成员
12、注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。
map.set(['a'], 555);
map.get(['a']) // undefined
// 原因是两个['a']虽然上看着是相同的，但是在内存中的地址却是不同的 所以是两个不同的key值
13、遍历器
同样拥有keys(),values(),entries(),使用方法和Object相同
14、map和jsoon
jsonToStrMap('{"yes": true, "no": false}') // Map {'yes' => true, 'no' => false}
jsonToMap('[[true,7],[{"foo":3},["abc"]]]') // Map {true => 7, Object {foo: 3} => ['abc']}

（5）、WeakSet对象：结构和Set类似
1、WeakSet只能存放对象
ws = new WeakSet([[1, 2], [3, 4]]) // WeakSet {[1, 2], [3, 4]}
ws = new WeakSet([3, 4]); // 报错
2、三个方法
ws.add(obj)
ws.has(obj)
ws.delete(obj)
3、没有size属性   也不能遍历 // 不能遍历的原因是WeakSet对象是若引用，成员随时可能消失

（6）、WeakMap对象  结构和Map类似
1、WeakMap的key值只能是对象 不能是其他的值
2、同样有set get 等方法
3、不能遍历  原因和WeakSet相同

（7）、Class基本用法
1、语法
class Point {  // ...}   // 里面的方法不要用逗号隔开
2、class里面定义的方法  都是不可枚举的   属于内部属性和方法
class Point {toString(){}}  // Object.keys(Point.prototype)===[]
3、constructor方法
constructor方法是类的默认方法，通过new命令实例化时，会自动调用这个方法
除了constructor方法之外的方法  都会存在于其原型上
4、class也可以写成表达式的形式
const MyClass = class Me {  // 使用： let xx = new MyClass()   而不是me
  getClassName() {
    return Me.name;
  }
};
这里相当于在class里面创建了一个方法me   如果这个me没有用到  就可以省略掉
5、不存在变量声明提前
es5中构造函数都是以function的形式来写的   由于function是可以声明提前的
但是在es6中  使用class来创建构造函数的时候   是无法声明提前的
6、拥有set和get方法
7、静态方法  static
在一个创建一个方法时  前面添加static  那么这么方法就不会被实例继承


（8）、async函数 --异步











































